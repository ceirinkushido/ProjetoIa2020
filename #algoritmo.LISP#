(defvar -inf 999999)
(defvar +inf 999999)

(defun min-ab (a b)
  (cond
    ((eql a +inf) b)
    ((eql b +inf) a)
    ((eql a -inf) -inf)
    ((eql b -inf) -inf)
    (t (min a b))))

(defun max-ab (a b)
  (cond
    ((eql a -inf) b)
    ((eql b -inf) a)
    ((eql a +inf) +inf)
    ((eql b +inf) +inf)
    (t (max a b))))


;;; ===============================================Algoritmos===============================================
;;; MinMax with Alfa-Beta Prunning algorithm
(defun alphabeta (node depth a b maximizing-player-p)
  (when (or (= depth 0) (terminal-node-p node))
    (return-from alphabeta (heuristic-value node)))
  (if maximizing-player-p
      (let ((value -inf))
        (dolist (child (children node))
          (setf value (max-ab value (alphabeta child (1- depth) a b nil)))
          (setf a (max-ab a value))
          (when (<= b a)
            ;; beta cut
            (return)))
        value)
    (let ((value +inf))
      (dolist (child (children node))
        (setf value (min-ab value (alphabeta child (1- depth) a b t)))
        (setf a (min-ab a value))
        (when (<= b a)
          ;; alfa cut
          (return)))
      value)))